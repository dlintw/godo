#!/usr/bin/env bash

error() {
	echo $1
	exit 1
}

usage() {
	error "usage: ${0##*/} <go-source-file> ..."
}


### replacing the logic that Make.inc does


# GOROOT must be set.
if [[ $GOROOT == "" ]]; then
	error "\$GOROOT is not set; use gomake or set \$GOROOT in your environment"
fi

if [[ $GOHOSTOS == "" ]]; then
	GOHOSTOS=$(uname | tr A-Z a-z | sed 's/mingw/windows/; s/.*windows.*/windows/')
fi

if [[ $GOOS == "" ]]; then
	GOOS=$GOHOSTOS
fi

case $GOOS in
	darwin|freebsd|linux|plan9|tiny|windows)
		;;
	*)
		error "Invalid \$GOOS '$GOOS'; must be darwin, freebsd, linux, plan9, tiny, or windows"
		;;
esac

if [[ $GOHOSTARCH == "" ]]; then
	if [[ $GOHOSTOS == "darwin" ]]; then
		# Even on 64-bit platform, darwin uname -m prints i386.
		# Check for amd64 with sysctl instead.
		GOHOSTARCH=$(if sysctl machdep.cpu.extfeatures | grep EM64T >/dev/null; then echo amd64; else uname -m | sed 's/i386/386/'; fi)
	else
		# Ask uname -m for the processor.
		GOHOSTARCH=$(uname -m | sed 's/^..86\$/386/; s/^.86\$/386/; s/x86_64/amd64/; s/arm.*/arm/')
	fi
fi

if [[ $GOARCH == "" ]]; then
	GOARCH=$GOHOSTARCH
fi

# darwin requires GOHOSTARCH match GOARCH
if [[ $GOOS == "darwin" ]]; then
	GOHOSTARCH=$GOARCH
fi

case $GOARCH in
	386)
		O=8
		;;
	amd64)
		O=6
		;;
	arm)
		O=5
		if [[ $GOOS != "linux" ]]; then
			error "Invalid \$GOOS '$GOOS' for GOARCH=arm; must be linux"
		fi
		;;
	*)
		error "Invalid \$GOARCH '$GOARCH'; must be 386, amd64, or arm"
		;;
esac

GC=${O}g
LD=${O}l


### begin actual logic


# filter out files from arguments, separated by "--"

FILES=()
ARGS=()
DONE_WITH_FILES=false

for arg in "$@"; do
	if [[ "$arg" == "--" ]]; then
		DONE_WITH_FILES=true
		continue
	fi
	
	if $DONE_WITH_FILES; then
		ARGS[${#ARGS[*]}]="$arg"
	else
		if ! [[ -f "$arg" ]]; then
			echo "file not found: $arg"
			usage
		fi
		FILES[${#FILES[*]}]="$arg"
	fi
done

# create a temp dir to put everything into

TMPDIR=$(mktemp -d -t "godo.$RANDOM.$$") || error "could not create temporary directory... sigh"
SRCDIR="$TMPDIR/src"
mkdir "$SRCDIR"

# if stdin is assumed, then lets cat it into a temp .go file

if (( ${#FILES[*]} == 0 )); then
	TMPFILE="$TMPDIR/tmp.go"
	cat > "$TMPFILE"
	FILES[${#FILES[*]}]="$TMPFILE"
fi

# copy all files into the temp dir, stripping any beginning shebang lines

for file in "${FILES[@]}"; do
	DESTFILE="$SRCDIR/$(basename $file)"
	awk 'NR==1 && /^#!/ { next } { print }' "$file" > "$DESTFILE"
done

# do the magic!

${GC} -o "$TMPDIR/_go_.${O}" "$SRCDIR/"* 2>&1 | while read -r line; do
	printf "%s\n" "${line//$SRCDIR\/}"
done
(( ${PIPESTATUS[0]} != 0)) && exit 1

${LD} -o "$TMPDIR/tmp.exe" "$TMPDIR/_go_.$O" | while read -r line; do
	printf "%s\n" "${line//$TMPDIR\/_go_.$O}"
done
(( ${PIPESTATUS[0]} != 0)) && exit 1

"$TMPDIR/tmp.exe" "${ARGS[@]}"

# clean up, clean up, everybody everywhere, clean up, clean up, everybody do your share

rm -rf "$TMPDIR"
